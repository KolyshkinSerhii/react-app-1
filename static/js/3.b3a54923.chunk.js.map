{"version":3,"sources":["HOC/WithAuthRedirect.js","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/Profile.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus-withHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/ProfileForms/MyPostForm.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","isOwner","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","createField","Input","type","Textarea","className","s","contacts","Object","keys","map","key","toLocaleLowerCase","Contacts","contactTitle","contactValue","ProfileData","toEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","description","src","photos","large","userPhoto","alt","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","likeCounts","maxLength100","maxLengthCreator","SendMessageReduxForm","required","SendMyPost","addNewPost","addPost","onSubmitSuccess","formValues","dispatch","reset","MyPosts","memo","postElements","posts","elem","id","my_posts","post","MyPostsContainer","profilePage","actions","addPostActionCreator","Profile","content","ProfileContainer","userId","match","params","authoraizedUserId","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.b3a54923.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    \r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            \r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__4hoeJ\",\"description\":\"ProfileInfo_description__1boq5\",\"contacts\":\"ProfileInfo_contacts__OSiZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1QtWl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"my_posts\":\"MyPosts_my_posts__1jDS0\",\"post\":\"MyPosts_post__2R435\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1HBvm\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport { useEffect } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner: () => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus ] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {props.isOwner && !editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={ activateEditMode }>{props.status || 'You can change status'}</span>\r\n                    </div>\r\n                }\r\n                {props.isOwner && editMode &&\r\n                    <div>\r\n                        <input onChange={ onStatusChange } autoFocus={true} onBlur={ deactivateEditMode } value={status} />\r\n                    </div>\r\n                }\r\n                {!props.isOwner &&\r\n                    <div>\r\n                        <span>{props.status}</span>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {reduxForm} from \"redux-form\";\r\nimport { Input, createField, Textarea } from '../../common/ControlForms';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            <div>\r\n                <b>Full name</b>: {createField('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div><b>Looking for a job</b>:\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div><b>Skills</b>: \r\n                {createField('Skills', 'lookingForAJobDescription',[], Textarea)}\r\n            </div>\r\n            <div><b>About me</b>: {createField('About me', 'aboutMe',[], Input)} </div>\r\n            <div> <b>Contacts</b>:\r\n                <div className={s.contacts}>\r\n                    <b>{Object.keys(profile.contacts).map(key => {\r\n                        return <div>{key}: {createField(key, 'contacts.' + key.toLocaleLowerCase(), [], Input)}</div>\r\n                    })}</b>\r\n                </div>\r\n            </div>\r\n            { error && <div>\r\n                    {error}\r\n                </div> }\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm =  reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;\r\n\r\n","import React, { useState } from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from '../../common/loader';\r\nimport ProfileStatusWithHooks from './ProfileStatus-withHooks';\r\nimport userPhoto from '..//..//../Images/user.png'\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onAvatarSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.description}>\r\n                <div><img src={props.profile.photos.large || userPhoto} alt=\"\" /></div>\r\n                {props.isOwner && <input type={\"file\"} onChange={onAvatarSelected} />}\r\n\r\n                {editMode \r\n                ? <ProfileDataReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                : <ProfileData toEditMode={() => {setEditMode(true)}} profile={props.profile} isOwner={props.isOwner}/>}\r\n                <div>\r\n                    <b>Status</b>: <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n    return <div><b>{contactTitle}</b> : {contactValue}</div>\r\n}\r\nconst ProfileData = (props, toEditMode) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.isOwner && <button onClick={props.toEditMode}>Edit profile</button>}\r\n            </div>\r\n            <div><b>Full name</b>: {props.profile.fullName} </div>\r\n            <div><b>Looking for a job</b>: {props.profile.lookingForAJob ? 'Yes' : 'No'} </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div><b>Skills</b>: {props.profile.lookingForAJobDescription} </div>\r\n            }\r\n            <div><b>About me</b>: {props.profile.aboutMe} </div>\r\n            <div> <b>Contacts</b>:\r\n                <div className={s.contacts}>\r\n                    {Object.keys(props.profile.contacts).map(key => {\r\n                        return <Contacts key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div>\r\n      <div className={s.item}>\r\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTsP_Ur8FvgyIock3PjlvCNl0U90rPJA7hwjt41Ge1AIgml6kY3\" alt=\"\"></img>\r\n        {props.message}\r\n         <div>like {props.likeCounts}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { reduxForm, reset} from 'redux-form';\r\nimport required, {maxLengthCreator } from '../../../Utilities/Validation/Validator';\r\nimport { Textarea, createField } from '../../common/ControlForms';\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst SendMyPost = (props) => {\r\n\r\n    let onAddNewPost = (value) => {\r\n        props.addNewPost(value.addPost);\r\n      }\r\n    const onSubmitSuccess = (formValues, dispatch) => {\r\n        dispatch(reset ('sendMyPost'));\r\n    }\r\n    return (\r\n        <div>\r\n            <SendMessageReduxForm onSubmit={onAddNewPost}\r\n                                onSubmitSuccess={onSubmitSuccess} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SendMyPostForm = (props) => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                {createField('New post', 'addPost', [required, maxLength100], Textarea, {}, '')}\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nconst SendMessageReduxForm = reduxForm({ form: 'sendMyPost' }) (SendMyPostForm)\r\n\r\nexport default SendMyPost;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from './Post/Post.jsx';\r\nimport SendMyPost from '../ProfileForms/MyPostForm';\r\n\r\nconst MyPosts = React.memo(props => {\r\n  \r\n  let postElements = props.posts.map(elem => <Post key={elem.id} message={elem.message} likeCounts={elem.likeCounts} />);\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.my_posts}>\r\n        MyPosts\r\n        <SendMyPost addNewPost={props.addNewPost} />\r\n      </div>\r\n      <div className={s.post}>\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default MyPosts;","import { actions } from '../../../Redux/Profile-reducer';\r\nimport MyPosts from './MyPosts.jsx';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNewPost: (addPost) => {\r\n      dispatch(actions.addPostActionCreator(addPost));\r\n    }\r\n  }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../TSTypes/TSTypesFile';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  isOwner: boolean\r\n  updateStatus: () => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.content}>\r\n      <ProfileInfo profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile} from '../../Redux/Profile-reducer';\r\nimport Profile from './Profile';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../HOC/WithAuthRedirect';\r\nimport { AppStateType } from '../../Redux/Redux-store';\r\nimport { ProfileType } from '../../TSTypes/TSTypesFile';\r\n\r\ntype OwnPropsType = {\r\n  pageTitle: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  authoraizedUserId: number | null\r\n  profile: ProfileType | null\r\n  status: string\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getUserStatus: (userId: number) => void\r\n  updateStatus: () => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizedUserId;\r\n    }\r\n    this.props.getUserProfile(userId as number);\r\n    this.props.getUserStatus(userId as number); \r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) \r\n    {this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render()  {\r\n    return (\r\n      <div>\r\n        <Profile {...this.props}\r\n        isOwner={!this.props.match.params.userId} \r\n        profile={this.props.profile}\r\n        status={this.props.status} \r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}/>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({ \r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authoraizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile}),\r\n  withRouter,\r\n  withAuthRedirect\r\n) (ProfileContainer)"],"sourceRoot":""}